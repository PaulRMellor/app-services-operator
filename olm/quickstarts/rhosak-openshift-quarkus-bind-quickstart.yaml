apiVersion: console.openshift.io/v1
kind: ConsoleQuickStart
metadata:
  name: rhosak-devsandbox-quarkus-bind-cli-toolscontainer-quickstart
spec:
  displayName: Binding an application to Red Hat OpenShift Streams for Apache Kafka using the CLI
  tags:
    - streams
    - kafka
    - quarkus
  durationMinutes: 10
  description: Binding an application in OpenShift to Red Hat OpenShift Streams for Apache Kafka using the CLI
  prerequisites:
    - You've completed the **Connecting OpenShift to Streams for Apache Kafka using the CLI** quick start.
    - You have privileges to deploy applications in the OpenShift project that you connected your Kafka instance to.
    - Your Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/) is in the **Ready** state.

  introduction: |-
      ### This quick start shows how to use the Red Hat OpenShift Application Services (RHOAS) CLI to the bind an example Quarkus application to a Kafka instance in Red Hat OpenShift Streams for Apache Kafka.

      As a developer of applications and services, there might be cases where you need to connect OpenShift applications to Kafka instances in Streams for Apache Kafka. Using an Operator to provide an application on OpenShift with the parameters required to connect to a Kafka instance is called *service binding*.

      In this quick start, you'll use the RHOAS CLI and RHOAS Operator to bind an example Quarkus application to a Kafka instance. [Quarkus](https://quarkus.io/) is a Kubernetes-native Java framework that is optimized for serverless, cloud, and Kubernetes environments.

      When you use the RHOAS CLI to bind a Kafka instance with an application, the RHOAS Operator automatically injects connection parameters as files into the Pod for the application. The example Quarkus application in this quick start uses the `quarkus-kubernetes-service-binding` [extension](https://quarkus.io/guides/deploying-to-kubernetes#service-binding), which means that the application automatically detects and uses the injected connection parameters. This eliminates the need for manual configuration of the application.

      #### Prerequisites
      - You've completed the **Connecting OpenShift to Streams for Apache Kafka using the CLI** quick start.
      - You have privileges to deploy applications in the OpenShift project that you connected your Kafka instance to.
      - Your Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/) is in the **Ready** state.

  tasks:
    - title: Deploying an example Quarkus application
      description: |-

        In this task, you'll deploy an example Quarkus application in the same project that you previously connected your Kafka instance to.

        The Quarkus application generates random numbers between 0 and 100 and produces those numbers to a Kafka topic. Another part of the application consumes the numbers from the Kafka topic. Finally, the application uses *server-sent events* to expose the numbers as a REST UI. A web page in the application displays the exposed numbers.

        #### Prerequisites
        - You've completed the **Connecting an OpenShift project to Red Hat OpenShift Streams for Apache Kafka using the CLI** quick start.
        - You have privileges to deploy applications in the OpenShift project that you connected your Kafka instance to.

        #### Procedure

        1. Log in to the OpenShift web console with privileges to deploy applications in the project that you previously connected your Kafka instance to.

        1. Click the [perspective switcher]{{highlight qs-perspective-switcher}}. Switch to the **Developer** perspective.
           The **Topology** page opens.

        1. Ensure that the current OpenShift project is the one you previously connected your Kafka instance to.

            i. At the top of the **Topology** page, click the **Project** drop-down menu.

            ii. Select the project that you previously connected your Kafka instance to.

        1. Deploy the example Quarkus application.

            i. Click [Add]{{highlight qs-nav-add}}.

            ii. On the **Add** page, click **Container images**.
                The **Deploy Image** page opens.

            iii. For the **Image name from external registry** option, enter `quay.io/rhoas/rhoas-quarkus-kafka-quickstart`.

            iv. For the **Runtime icon** option, select `quarkus`. For all other options, keep the default values.

            vi. Click **Create**.
                  The **Topology** page opens.
                  You should see an icon for the Quarkus application you created. After some time, the icon should have a dark blue circle. This indicates that OpenShift deployed the application successfully.

           vii. Click the **Open URL** link in the top-right corner of the icon for the application.
                  A web page for the Quarkus application opens.

        1. In your web browser, add `/prices.html` to the URL of the web page for the Quarkus application.
           A new web page, entitled **Last price**, opens. Because you have not yet connected the Quarkus application to your Kafka instance, the price value appears as `N/A`.

        1. In the OpenShift web console, click the icon for the Quarkus application.
           A sidebar opens, with the **Resources** tab displayed. Under **Pods**, you should see a single Pod, corresponding to the Quarkus application.

        1. Next to the name of the Pod, click **View logs**.
           In the logs for the Quarkus application, you see warnings indicating that the application can't connect to Kafka. You'll establish this connection in a later task.

      review:
        instructions: |-
          #### Verify that you successfully deployed the example Quarkus application
          * Did you see the Quarkus application on the Topology page of your project?
          * Did the Quarkus application icon have a dark blue circle around it, indicating a successful deployment?
          * Did the logs for the Quarkus application Pod state that the application can't connect to a Kafka instance?
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          You've successfully deployed an example Quarkus application to your OpenShift project.
        failed: Try the steps again.

    - title: Creating a Kafka topic for your Quarkus application
      description: |-

        In the previous task, you created an example Quarkus application that uses a Kafka topic called `prices` to produce and consume messages. In this task, you'll create the `prices` topic in your Kafka instance.

        #### Prerequisites
        - Your Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/) is in the **Ready** state.

        #### Procedure

        1. In your web browser, open the [Kafka Instances](https://cloud.redhat.com/beta/application-services/streams/kafkas) page of the Streams for Apache Kafka web console. Click the name of the Kafka instance that you want to add a topic to.

        1. Click **Create topic** and follow the guided steps to define the topic details. Click **Next** to complete each step and click **Finish** to complete the setup.

           Specify the following values:

            **Topic name**: ```prices```.

            **Partitions**: ```1```.

            **Retention time**: ```1 day```

            **Replicas**: By default, this option is preconfigured to `3` replicas and `2` minimum in-sync-replicas.

        After you complete the topic setup, the new Kafka topic is listed in the topics table. You're now ready to bind the example Quarkus application to your Kafka instance, so that the application can use the topic to produce and consume messages.
      review:
        instructions: |-
          #### Verify that you successfully created the Kafka topic
           - Is the `prices` topic listed in the topics table?
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          You successfully created the topic needed by the example Quarkus application. You're now ready to bind the Quarkus application to your Kafka instance.
        failed: Try the steps again.

    - title: Binding the Quarkus application to your Kafka instance
      description: |-

        In this task, you use the RHOAS CLI to bind your Kafka instance to the example Quarkus application you created. When you perform this binding, the RHOAS Operator injects connection parameters as files into the Pod for the application.

        The Quarkus application in this quick start uses the `quarkus-kubernetes-service-binding` [extension](https://quarkus.io/guides/deploying-to-kubernetes#service-binding). This means that the application automatically detects and uses the injected connection parameters.

        #### Prerequisites
        - You've completed the **Connecting OpenShift to Red Hat OpenShift Streams for Apache Kafka using the CLI** quick start.
        - You've deployed the example Quarkus application.
        - Your Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/) is in the **Ready** state.
        - You've created the `prices` topic in your Kafka instance.

        #### Procedure

        1. If you used an image provided by Red Hat to install CLI tools in your OpenShift project:

            i. Ensure that you're logged in to the OpenShift web console as the same user that deployed the Quarkus application in the previous task.

            ii. In your project, click the icon for the tools application.
                A sidebar opens, with the **Resources** tab displayed. Under **Pods**, you should see a single Pod, corresponding to the tools application.

            iii. Click the link to the Pod.
                 The **Pod details** page opens.

            iv. Click the **Terminal** tab.
                A terminal window opens inside the Pod.

        1. If you deployed CLI tools locally on your machine:

            i. Open a terminal window.

            ii. Log in to OpenShift as the same user that deployed the Quarkus application in the previous task.

           ```
           $ oc login -u <user> -p <password> --server=<host:port>
           ```

           In the preceding example, replace the values in angle brackets (`< >`) with your own values.

        1. In your terminal window, ensure that the current OpenShift project is the one in which you deployed the example Quarkus application. For example:

           ```
           $ oc project my-project
           ```

        1. Use the RHOAS CLI to bind your Kafka instance to your OpenShift project.

           ```
           $ rhoas cluster bind
           ```

           You're prompted to specify the Kafka instance in Streams for Apache Kafka that you want to connect to OpenShift.

        1. Type the name of the Kafka instance that you want to connect to OpenShift. Press **Enter**.

           You're prompted to specify the OpenShift application that you want to bind your Kafka instance to.

        1. To bind to the the example Quarkus application that you deployed, type `rhoas-quarkus-kafka-quickstart`. Press **Enter**.

        1. Type `y` to confirm that you want to continue. Press **Enter**.
           When binding is complete, you should see output like the following:
           ```
           Binding my-kafka-instance with rhoas-quarkus-kafka-quickstart app succeeded
           ```
           The output shows that the RHOAS CLI successfully bound a Kafka instance called `my-kafka-instance` to the example Quarkus application (called `rhoas-quarkus-kafka-quickstart`).

           OpenShift redeploys the Quarkus application. When the application is running, it starts using the `prices`topic that you created in your Kafka instance. One part of the Quarkus application publishes price updates to this topic, while another part of the application consumes the updates.

        1. Reopen the **Last price** web page that you opened in the first task of this quick start.

        1. On the **Last price** web page, observe that the the price value is continuously updated. The Quarkus application is now using the `prices` topic in your Kafka instance to produce and consume messages.

        1. In the OpenShift web console, click [Topology]{{highlight qs-nav-topology}}.

        1. Click the icon for the Quarkus application.
           A sidebar opens, with the **Resources** tab displayed. Under **Pods**, you should still see a Pod corresponding to the Quarkus application.

        1. Next to the name of the Pod, click **View logs**.
           You should now see that the Quarkus application has connected to a Kafka instance.

        1. On the same page of the console, click the **Details** tab. Scroll down until you see the **Volumes** section.
           Observe that there is a volume mounted on the `/bindings` path of the Pod. This volume contains the files for individual connection parameters that the RHOAS Operator injected into the application.

           Because the Quarkus application uses the `quarkus-kubernetes-service-binding` [extension](https://quarkus.io/guides/deploying-to-kubernetes#service-binding), the application automatically detects and uses the injected connection parameters.

      review:
        instructions: |-
          #### Verify that you successfully bound your Quarkus application to your Kakfa instance in OpenShift Streams for Apache Kafka
          - Is the price value continuously updated on the **Last price** web page of the Quarkus application?
          - Did the logs in the Pod for the Quarkus application show that the application is connected to a Kafka instance?
          - Did you see service binding files mounted on a volume in the Pod for the Quarkus application?

        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          Congratulations! You successfully bound an example Quarkus application running in OpenShift to a Kafka instance in Streams for Apache Kafka.
        failed: Try the steps again.

  conclusion: >-
    Congratulations! You successfully bound a Quarkus application running in OpenShift to a Kafka instance in Streams for Apache Kafka.
    The RHOAS Operator automatically injected the connection parameters required for the Quarkus application to connect to the Kafka instance.
