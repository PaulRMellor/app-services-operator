apiVersion: console.openshift.io/v1
kind: ConsoleQuickStart
metadata:
  name: rhosak-devsandbox-connect-cli-toolscontainer-quickstart-jbyrne
spec:
  displayName: Connecting OpenShift to Streams for Apache Kafka using the CLI
  tags:
    - streams
    - kafka
  durationMinutes: 10
  description: Connecting an OpenShift project to Red Hat OpenShift Streams for Apache Kafka using the RHOAS CLI
  prerequisites:
    - You have a Red Hat account.
    - You’ve created a Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/^) and the instance is in the *Ready* state.
    - You have cluster administrator access for your OpenShift cluster.
  introduction: |-
    ### This quick start shows how to use the Red Hat OpenShift Application Services (RHOAS) CLI to connect a project in an OpenShift cluster to Red Hat OpenShift Streams for Apache Kafka.

    As a developer of applications and services, there might be cases where you need to connect OpenShift applications to Kafka instances in Streams for Apache Kafka. Connecting an OpenShift application to a backing service such as Streams for Apache Kafka is called *service binding*.

    Before you can bind an OpenShift application to a Kafka instance, you need to connect the Kafka instance to the appropriate project in your OpenShift cluster. To make this connection, you can use the Red Hat OpenShift Application Services (RHOAS) Operator and CLI.

    #### Prerequisites
    - You have a Red Hat account.
    - You’ve created a Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/^) and the instance is in the *Ready* state.
    - You have cluster administrator access for your OpenShift cluster.

  tasks:
    - title: Installing the RHOAS Operator
      description: |-
          The Red Hat OpenShift Application Services (RHOAS) Operator enables you to expose Kafka instances in Streams for Apache Kafka to separate OpenShift clusters.

          When you install the Operator in an OpenShift cluster, you can use the RHOAS CLI to connect a specified Kafka instance to the cluster. You can then work directly with the Kafka instance using standard OpenShift features and APIs.

          #### Prerequisites
           - You have cluster administrator access for your OpenShift cluster.

          #### Procedure

          1. Ensure that you are logged in to the OpenShift web console as a cluster administrator. If you are not logged in as a cluster administrator, log out, and then log back in. Then, resume this quick start.

          1. Click the [perspective switcher]{{highlight qs-perspective-switcher}}.  Switch to the **Administrator** perspective.

          1. In the left menu, click **Operators** > **OperatorHub**.

          1. In the **Filter by keyword** field, enter `RHOAS`.

          1. Select the **OpenShift Application Services (RHOAS)** Operator.

          1. If you see a dialog box entitled **Show community Operator**, review the included information. When you have finished, click **Continue**.
             An information sidebar for the RHOAS Operator opens.

          1. In the sidebar, review the information about the RHOAS Operator and then click **Install**.
             The **Install Operator** page opens.

          1. On the **Install Operator** page, for the **Installation mode** option, ensure that `All namespaces on the cluster` is selected. Keep all other default values.

          1. Click **Install**.
             When the installation process finishes, click **View Operator** to see the Operator details.
             Observe that the RHOAS Operator is installed in the `openshift-operators` namespace by default.

      review:
        instructions: |-
          #### Verify that you successfully installated the RHOAS Operator
          Do you see the RHOAS Operator on the **Installed Operators** page?
        failedTaskHelp: This task isn’t verified yet. Try the task again.

      summary:
        success: >-
            You have successfully installed the RHOAS Operator. You are ready to install the required CLI tools.
        failed: Try the steps again.

    - title: Installing CLI tools
      description: |-
        When the RHOAS Operator is installed in your OpenShift cluster, you can use the RHOAS CLI to connect a Kafka instance in Streams for Apache Kafka to a project in the cluster. In this task, you use
        a tools image provided by Red Hat to install the required CLI tools in your OpenShift project.

        Alternatively, you can install the required CLI tools locally on your machine. See:
          * [Installing the RHOAS CLI (rhoas)](https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/f520e427-cad2-40ce-823d-96234ccbc047#_8818f0d5-ae20-42c8-9622-a98e663ff1a8^)
          * [Installing the OpenShift CLI (oc)](https://docs.openshift.com/container-platform/4.7/cli_reference/openshift_cli/getting-started-cli.html#installing-openshift-cli^)
          * [Installing the OpenShift Developer CLI (odo)](https://docs.openshift.com/container-platform/4.7/cli_reference/developer_cli_odo/installing-odo.html^)

        **NOTE**: If you've installed the CLI tools on your machine, or you previously installed the tools image provided by Red Hat, click **Next** to skip to the next task in this quick start.

        #### Procedure

        1. Click the [perspective switcher]{{highlight qs-perspective-switcher}}. Switch to the **Developer** perspective.

        1. Click the **Project** drop-down menu at the top of the page. Select **Create Project**.

            i. In the **Name** field of the **Create Project** dialog box, enter a unique name, for example, `my-project`.

            ii. (Optional) Add details for **Display name** and **Description**.

            iii. Click **Create**.

        1. Deploy the tools image provided by Red Hat.

            i. Click [Add]{{highlight qs-nav-add}}.

            ii. Click **Container images**.
                The **Deploy Image** page opens.

            iii. For the **Image name from external registry** option, enter `quay.io/rhosak/rhoas-tools`.

            iv. For the **Runtime icon** option, select `openshift`.

            v. Under **Advanced Options**, *deselect* the **Create a route to the Application** check box. For all other options, keep the default values.

            vi. Click **Create**.
                  The [Topology]{{highlight qs-nav-topology}} page opens.
                  You should see an icon for the tools application you created. The icon should include a dark blue circle, which indicates that OpenShift deployed the application successfully.

        1. Click the icon for the tools application.
           A sidebar opens, with the **Resources** tab displayed. Under **Pods**, you should see a single Pod, corresponding to the tools application.

        1. Click the link to the Pod.
           The **Pod details** page opens.

        1. Click the **Terminal** tab.
           A terminal window opens inside the Pod.

        1. To check whether you can access the required tools, in the terminal, enter `rhoas`.
           The `rhoas` command should show help text for the RHOAS CLI.

      review:
        instructions: |-
          #### Verify that you successfully installed the CLI tools
          Do you you see the RHOAS CLI help text in the terminal of the Pod for the tools application?
        failedTaskHelp: This task isn’t verified yet. Try the task again.

      summary:
        success: >-
          You have installed the required CLI tools. You are ready to connect you Kafka instance to your OpenShift cluster.
        failed: Try the steps again.

    - title: Verifying RHOAS Operator connection to your OpenShift cluster
      description: |-
        In previous tasks, you installed the RHOAS Operator and required CLI tools. You can now check whether the Operator is working by using the RHOAS CLI to connect to the OpenShift cluster and retrieve the cluster status.

        **NOTE**: By default, when you use the `rhoas login` command to log in to the RHOAS CLI, the CLI starts a sign-in flow in your web browser. However, the terminal in the Pod for your tools application does not have access to a browser. Therefore, in this task,
        you log in to the RHOAS CLI using a token.

        #### Prerequisites
         - You've installed the RHOAS Operator.
         - You've installed the CLI tools.
         - You have cluster administrator access for your OpenShift cluster.

        #### Procedure

        1. Log in to your OpenShift cluster as a cluster administrator.

           ```
           $ oc login -u <cluster-admin-user> -p <password> --server=<host:port>
           ```
           In the preceding example, replace the values in angle brackets (`< >`) with your own values.

        1. Ensure that the current OpenShift project is the one you previously created. For example:

           ```
           $ oc project my-project
           ```
        1. In your web browser, open the [OpenShift Cluster Manager API Token](https://cloud.redhat.com/openshift/token^) page. Copy the access token shown.

        1. In the OpenShift web console, open the terminal of the Pod for your tools application, as described in the previous task.

        1. Log in to the RHOAS CLI using the token you copied.

           ```
           rhoas login --token=<token>
           ```
           In the preceding example, replace `<token>` with the token value that you copied. To paste the value that you copied, right-click in the terminal window and select **Paste**.

           When you press **Enter**, you should see a response confirming that you are logged in.

        1. Use the CLI to connect to your OpenShift cluster and retrieve the cluster status.

           ```
           $ rhoas cluster status
           Namespace: my-project
           RHOAS Operator: Installed
           ```
           As shown in the output, the CLI indicates that the RHOAS Operator was successfully installed. The CLI also uses the RHOAS Operator to retrieve the name of the current OpenShift project (namespace). In this example, the current project is called `my-project`.

      review:
        instructions: |-
          #### Verify connection between the RHOAS Operator and your OpenShift cluster
          * Do you see `RHOAS Operator: Installed` when you execute the `rhoas cluster status` command?
          * Do you see the current OpenShift namespace listed when you execute the `rhoas cluster status` command?
        failedTaskHelp: This task isn't verified yet. Try the task again.
      summary:
        success: >-
          You've verified the RHOAS Operator is connected to your OpenShift cluster.
        failed: Try the steps again.

    - title: Connecting a Kafka instance to your OpenShift cluster.
      description: |
        In previous tasks, you installed the required CLI tools and verified connection from the RHOAS Operator to your OpenShft cluster. You're now ready to connect a specified Kafka instance in Streams for Apache Kafka to the current project in your OpenShift cluster.

        In this task, you'll use the RHOAS CLI to connect your Kafka instance to your OpenShift project.

        #### Prerequisites

        - You’ve created a Kafka instance in [Streams for Apache Kafka](https://cloud.redhat.com/beta/application-services/streams/^) and the instance is in the *Ready* state.
        - You've verified connection between the RHOAS Operator and your OpenShift cluster.
        - You have an API token to connect to your Kafka instance. To get a token, see the [OpenShift Cluster Manager API Token](https://cloud.redhat.com/openshift/token^) page.
        - You have privileges to create a new project in your OpenShift cluster.

        #### Procedure

        1. If you're not already logged in to your OpenShift cluster, log in as a user (for example, a cluster administrator) that has privileges to create a new project in the cluster. For example:

           ```
           $ oc login -u <cluster-admin-user> -p <password> --server=<host:port>
           ```
           In the preceding example, replace the values in angle brackets (`< >`) with your own values.

        1. Ensure that the current OpenShift project is the one created in the previous task. For example:

           ```
           $ oc project my-project
           ```

        1. Connect a Kafka instance in Streams for Apache Kafka to the current project in your OpenShift cluster.

           ```
           $ rhoas cluster connect --ignore-context
           ```
           You're prompted to specify the Kafka instance that you want to connect to OpenShift.

        1. Type the name of the Kafka instance that you want to connect to OpenShift. Press **Enter**.
           You should see output like the following:

           ```
           Connection Details:
           Apache Kafka instance:  my-kafka-instance
           Kubernetes Namespace:   my-project
           Service Account Secret: rh-cloud-services-service-account
           ```

        1. Verify the connection details shown by the CLI. When you are ready to continue, type `y`. Then, press **Enter**.
           You're prompted to provide an access token. The RHOAS Operator requires this token to make a connection to your Kafka instance.

        1. In your web browser, open the [OpenShift Cluster Manager API Token](https://cloud.redhat.com/openshift/token) page. Copy the access token shown.

        1. In your terminal window, right-click and select **Paste**. Press **Enter**.
           The RHOAS Operator uses the token to create a **KafkaConnection** resource on your OpenShift cluster. When this process is complete, you should see lines like the following:

           ```
           KafkaConnection resource "my-kafka-instance" has been created
           Waiting for status from KafkaConnection resource.
           Created KafkaConnection can be injected into your application.
           ...
           KafkaConnection successfully installed on your cluster.
           ```

        1. Verify that the RHOAS Operator successfully created the connection.

           ```
           $ oc get KafkaConnection

           NAME   		         AGE
           my-kafka-instance     2m35s
           ```
           As shown in the output, the RHOAS Operator creates a **KafkaConnection** resource that matches the name of your Kafka instance. In this example, the resource name matches a Kafka instance called `my-kafka-instance`.

      review:
        instructions: |-
          #### Verify that you've successfully connected to a Kafka instance in Streams for Apache Kafka
          Do you see a **KafkaConnection** resource listed when you execute the `oc get KafkaConnection` command?
        failedTaskHelp: This task isn’t verified yet. Try the task again.
      summary:
        success: >-
          You've connected your Kafka instance to a project in your OpenShift cluster.
        failed: Try the steps again.

    - title: Inspecting the Kafka connection details
      description: |-
        With your Kafka instance connected to a specified project in your OpenShift cluster, you're ready to bind applications in the project to the Kafka instance.
        You can do this in different ways:
        * Inspect the connection credentials for your Kafka instance and manually configure an application to connect to the instance.
        * Use Operator functionality to bind your application to the the Kafka instance and have connection credentials automatically injected into your application.

        In this task, you'll inspect the connection credentials required to *manually* connect an application to your Kafka instance.

        #### Prerequisites
        You've connected your Kafka instance to a project in your OpenShift cluster.

        #### Procedure

        1. In your terminal, get the name of the **KafkaConnection** resource that you created in the previous task.

           ```
           $ oc get KafkaConnection
           ```

        1. Retrieve the details of the **KafkaConnection** resource.

           ```
           $ oc describe KafkaConnection/<kafka-connection-name>
           ```

           In the preceding example, replace `<kafka-connection-name>` with the name of your **KafkaConnection** resource. When you press **Enter**, the output shows comprehensive information for the **KafkaConnection** resource.

        1. To manually configure an application to connect to the Kafka instance, collect the following required connection details:

            * **Bootstrap Server Host**. This the bootstrap server endpoint of the Kafka instance, in the format of `<host name>:<port>`.
            * **Sasl Mechanism**. This is the *Simple Authentication and Security Layer* (SASL) mechanism used by the Kafka instance for client authentication.
            * **Security Protocol**. This is the protocol used by the Kafka instance to secure client connections.
            * **Service Account Secret**. This secret contains the client ID and client secret required to connect to the Kafka instance.

      review:
        instructions: |-
          #### Verify that you have collected the details required to manually configure an application to connect to your Kafka instance
          * Did you find the **Bootstrap Server Host** field, with a value in the format of `<host name>:<port>`?
          * Did you identify the authentication mechanism (`PLAIN` or `BEARER`) that the Kafka instance is using?
          * Did you identify the security mechanism (`SASL_PLAINTEXT` or `SASL_SSL`) that the Kafka instance is using?
          * Did you find the name of the service account secret in which the client ID and client secret are stored?
        failedTaskHelp: This task isn't verified yet. Try the task again.
      summary:
        success: >-
         You've collected the connection details you need to manually configure an application in your OpenShift project to connect to your Kafka instance.
        failed: Try the steps again.
  conclusion: >-
    You've successfully connected a Kafka instance in Streams for Apache Kafka to a project in your OpenShift cluster.
    You are now ready to bind to the Kafka instance from applications in the OpenShift project.
  nextQuickStart:
    - rhosak-devsandbox-quarkus-bind-cli-toolscontainer-quickstart
